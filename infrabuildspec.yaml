Description: >

    This template will create necessary infrastructure for the deployment of nodeJS Applications. Infra would include the 
    below:
    1. ALB Target Group
    2. ECS Task (Would include the container)
    3. ECS Service
    4. CloudWatch Logs Group
    5. ALB Listener Rule to define path for the app/api requests
    
    SSM would be used as the store for parameters
    GitHub repo name would be used to name all the associated entities in the infrastructure. The name would be prefixed 
    by the following prefix for each entity to avoid confisuion when troublshooting problems. The prefix would be
    a composite of environment and entity type
    
    ts: service in test environment e.g. st-customer-profile-repo
    tt: task in test environment e.g. tt-customer-profile-repo
    tc: container in test environment e.g. tc-customer-profile-repo
    tr: Target group in test environment e.g. rt-customer-profile-repo
    lt: log group in test lt-customer-profile-repo
    
Parameters:

    # The following parameters are set dynamically by AWS CodePipeline. Add more parameters for secrets
    # currently cloudformation doesn't support retrieving parameters of type Secret from SSM
    # At the build step we would be creating application/repo specific parameters. Every appalication 

    ApplicationName:
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: /customer-profile-repo/AppName
# docker image URL would be set in the build phase and updated/created as SSM parameter
    DockerImageURL:
        Type : 'AWS::SSM::Parameter::Value<String>'
        Default: /customer-profile-repo/DockerImageURL
# the environment name would be modified from Codepipeline action using Override Parameter
# values should be
#  dev: development environment
#  test: test environment
#  uat: UAT (Unit Acceptance Testing)
#  prod: production
    EnvironmentType:
        Type: String
        AllowedValues: 
            - dev
            - test
            - uat
            - prod
        Description: This is the environment variable which would be set by the action in the pipeline using functionn overrides
# the environment name would be modified from Codepipeline action using Override Parameter
    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
# the environment name would be modified from Codepipeline action using Override Parameter
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2
# the environment name would be modified from Codepipeline action using Override Parameter
    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /customers*

Mappings: 
  EnvMap: 
    ServiceName: 
      dev: "ds-customer-profile-repo"
      test: "ts-customer-profile-repo"
      uat: "us-customer-profile-repo"
      prod: "ps-customer-profile-repo"
    TaskName: 
      dev: "dt-customer-profile-repo"
      test: "tt-customer-profile-repo"
      uat: "ut-customer-profile-repo"
      prod: "pt-customer-profile-repo"
    TargetGroupName: 
      dev: "dr-customer-profile-repo"
      test: "tr-customer-profile-repo"
      uat: "ur-customer-profile-repo"
      prod: "pr-customer-profile-repo"
    CloudWatchLogGroupName: 
      dev: "dl-customer-profile-repo"
      test: "tl-customer-profile-repo"
      uat: "ul-customer-profile-repo"
      prod: "pl-customer-profile-repo"
    ECSClusterName: 
      dev: "ecs-dev-cluster"
      test: "ecs-test-cluster"
      uat: "ecs-uat-cluster"
      prod: "ecs-prod-cluster"
    ContainerName: 
      dev: "dc-customer-profile-repo"
      test: "tc-customer-profile-repo"
      uat: "uc-customer-profile-repo"
      prod: "pc-customer-profile-repo"
      
Resources:
    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
#            Cluster: !Ref Cluster
            Cluster: !FindInMap [ EnvMap, !Ref EnvironmentType, dev ]
            Role: "AWSServiceRoleForECS"
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: "product-service"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: product-service
            ContainerDefinitions:
                - Name: product-service
                  Essential: true
                  Image: !Ref DockerImageURL
#                  Image: 275396840892.dkr.ecr.us-east-1.amazonaws.com/ecs-refarch-cloudformation/product-service:1.0.0
                  Memory: 128
                  PortMappings:
                    - ContainerPort: 8080
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
    
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /healthcheck
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            
     ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
            
